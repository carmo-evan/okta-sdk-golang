/*
Okta Management APIs

Allows customers to easily access the Okta API

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 3.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
)

// Brand struct for Brand
type Brand struct {
	AgreeToCustomPrivacyPolicy *bool `json:"agreeToCustomPrivacyPolicy,omitempty"`
	CustomPrivacyPolicyUrl *string `json:"customPrivacyPolicyUrl,omitempty"`
	DefaultApp *BrandDefaultApp `json:"defaultApp,omitempty"`
	// The language specified as an [IETF BCP 47 language tag](https://datatracker.ietf.org/doc/html/rfc5646).
	DisplayLanguage *string `json:"displayLanguage,omitempty"`
	Id *string `json:"id,omitempty"`
	OptOutOfUserCommunications *bool `json:"optOutOfUserCommunications,omitempty"`
	RemovePoweredByOkta *bool `json:"removePoweredByOkta,omitempty"`
	Links map[string]map[string]interface{} `json:"_links,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Brand Brand

// NewBrand instantiates a new Brand object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBrand() *Brand {
	this := Brand{}
	return &this
}

// NewBrandWithDefaults instantiates a new Brand object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBrandWithDefaults() *Brand {
	this := Brand{}
	return &this
}

// GetAgreeToCustomPrivacyPolicy returns the AgreeToCustomPrivacyPolicy field value if set, zero value otherwise.
func (o *Brand) GetAgreeToCustomPrivacyPolicy() bool {
	if o == nil || o.AgreeToCustomPrivacyPolicy == nil {
		var ret bool
		return ret
	}
	return *o.AgreeToCustomPrivacyPolicy
}

// GetAgreeToCustomPrivacyPolicyOk returns a tuple with the AgreeToCustomPrivacyPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Brand) GetAgreeToCustomPrivacyPolicyOk() (*bool, bool) {
	if o == nil || o.AgreeToCustomPrivacyPolicy == nil {
		return nil, false
	}
	return o.AgreeToCustomPrivacyPolicy, true
}

// HasAgreeToCustomPrivacyPolicy returns a boolean if a field has been set.
func (o *Brand) HasAgreeToCustomPrivacyPolicy() bool {
	if o != nil && o.AgreeToCustomPrivacyPolicy != nil {
		return true
	}

	return false
}

// SetAgreeToCustomPrivacyPolicy gets a reference to the given bool and assigns it to the AgreeToCustomPrivacyPolicy field.
func (o *Brand) SetAgreeToCustomPrivacyPolicy(v bool) {
	o.AgreeToCustomPrivacyPolicy = &v
}

// GetCustomPrivacyPolicyUrl returns the CustomPrivacyPolicyUrl field value if set, zero value otherwise.
func (o *Brand) GetCustomPrivacyPolicyUrl() string {
	if o == nil || o.CustomPrivacyPolicyUrl == nil {
		var ret string
		return ret
	}
	return *o.CustomPrivacyPolicyUrl
}

// GetCustomPrivacyPolicyUrlOk returns a tuple with the CustomPrivacyPolicyUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Brand) GetCustomPrivacyPolicyUrlOk() (*string, bool) {
	if o == nil || o.CustomPrivacyPolicyUrl == nil {
		return nil, false
	}
	return o.CustomPrivacyPolicyUrl, true
}

// HasCustomPrivacyPolicyUrl returns a boolean if a field has been set.
func (o *Brand) HasCustomPrivacyPolicyUrl() bool {
	if o != nil && o.CustomPrivacyPolicyUrl != nil {
		return true
	}

	return false
}

// SetCustomPrivacyPolicyUrl gets a reference to the given string and assigns it to the CustomPrivacyPolicyUrl field.
func (o *Brand) SetCustomPrivacyPolicyUrl(v string) {
	o.CustomPrivacyPolicyUrl = &v
}

// GetDefaultApp returns the DefaultApp field value if set, zero value otherwise.
func (o *Brand) GetDefaultApp() BrandDefaultApp {
	if o == nil || o.DefaultApp == nil {
		var ret BrandDefaultApp
		return ret
	}
	return *o.DefaultApp
}

// GetDefaultAppOk returns a tuple with the DefaultApp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Brand) GetDefaultAppOk() (*BrandDefaultApp, bool) {
	if o == nil || o.DefaultApp == nil {
		return nil, false
	}
	return o.DefaultApp, true
}

// HasDefaultApp returns a boolean if a field has been set.
func (o *Brand) HasDefaultApp() bool {
	if o != nil && o.DefaultApp != nil {
		return true
	}

	return false
}

// SetDefaultApp gets a reference to the given BrandDefaultApp and assigns it to the DefaultApp field.
func (o *Brand) SetDefaultApp(v BrandDefaultApp) {
	o.DefaultApp = &v
}

// GetDisplayLanguage returns the DisplayLanguage field value if set, zero value otherwise.
func (o *Brand) GetDisplayLanguage() string {
	if o == nil || o.DisplayLanguage == nil {
		var ret string
		return ret
	}
	return *o.DisplayLanguage
}

// GetDisplayLanguageOk returns a tuple with the DisplayLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Brand) GetDisplayLanguageOk() (*string, bool) {
	if o == nil || o.DisplayLanguage == nil {
		return nil, false
	}
	return o.DisplayLanguage, true
}

// HasDisplayLanguage returns a boolean if a field has been set.
func (o *Brand) HasDisplayLanguage() bool {
	if o != nil && o.DisplayLanguage != nil {
		return true
	}

	return false
}

// SetDisplayLanguage gets a reference to the given string and assigns it to the DisplayLanguage field.
func (o *Brand) SetDisplayLanguage(v string) {
	o.DisplayLanguage = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Brand) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Brand) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Brand) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Brand) SetId(v string) {
	o.Id = &v
}

// GetOptOutOfUserCommunications returns the OptOutOfUserCommunications field value if set, zero value otherwise.
func (o *Brand) GetOptOutOfUserCommunications() bool {
	if o == nil || o.OptOutOfUserCommunications == nil {
		var ret bool
		return ret
	}
	return *o.OptOutOfUserCommunications
}

// GetOptOutOfUserCommunicationsOk returns a tuple with the OptOutOfUserCommunications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Brand) GetOptOutOfUserCommunicationsOk() (*bool, bool) {
	if o == nil || o.OptOutOfUserCommunications == nil {
		return nil, false
	}
	return o.OptOutOfUserCommunications, true
}

// HasOptOutOfUserCommunications returns a boolean if a field has been set.
func (o *Brand) HasOptOutOfUserCommunications() bool {
	if o != nil && o.OptOutOfUserCommunications != nil {
		return true
	}

	return false
}

// SetOptOutOfUserCommunications gets a reference to the given bool and assigns it to the OptOutOfUserCommunications field.
func (o *Brand) SetOptOutOfUserCommunications(v bool) {
	o.OptOutOfUserCommunications = &v
}

// GetRemovePoweredByOkta returns the RemovePoweredByOkta field value if set, zero value otherwise.
func (o *Brand) GetRemovePoweredByOkta() bool {
	if o == nil || o.RemovePoweredByOkta == nil {
		var ret bool
		return ret
	}
	return *o.RemovePoweredByOkta
}

// GetRemovePoweredByOktaOk returns a tuple with the RemovePoweredByOkta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Brand) GetRemovePoweredByOktaOk() (*bool, bool) {
	if o == nil || o.RemovePoweredByOkta == nil {
		return nil, false
	}
	return o.RemovePoweredByOkta, true
}

// HasRemovePoweredByOkta returns a boolean if a field has been set.
func (o *Brand) HasRemovePoweredByOkta() bool {
	if o != nil && o.RemovePoweredByOkta != nil {
		return true
	}

	return false
}

// SetRemovePoweredByOkta gets a reference to the given bool and assigns it to the RemovePoweredByOkta field.
func (o *Brand) SetRemovePoweredByOkta(v bool) {
	o.RemovePoweredByOkta = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *Brand) GetLinks() map[string]map[string]interface{} {
	if o == nil || o.Links == nil {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Brand) GetLinksOk() (map[string]map[string]interface{}, bool) {
	if o == nil || o.Links == nil {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *Brand) HasLinks() bool {
	if o != nil && o.Links != nil {
		return true
	}

	return false
}

// SetLinks gets a reference to the given map[string]map[string]interface{} and assigns it to the Links field.
func (o *Brand) SetLinks(v map[string]map[string]interface{}) {
	o.Links = v
}

func (o Brand) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AgreeToCustomPrivacyPolicy != nil {
		toSerialize["agreeToCustomPrivacyPolicy"] = o.AgreeToCustomPrivacyPolicy
	}
	if o.CustomPrivacyPolicyUrl != nil {
		toSerialize["customPrivacyPolicyUrl"] = o.CustomPrivacyPolicyUrl
	}
	if o.DefaultApp != nil {
		toSerialize["defaultApp"] = o.DefaultApp
	}
	if o.DisplayLanguage != nil {
		toSerialize["displayLanguage"] = o.DisplayLanguage
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.OptOutOfUserCommunications != nil {
		toSerialize["optOutOfUserCommunications"] = o.OptOutOfUserCommunications
	}
	if o.RemovePoweredByOkta != nil {
		toSerialize["removePoweredByOkta"] = o.RemovePoweredByOkta
	}
	if o.Links != nil {
		toSerialize["_links"] = o.Links
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *Brand) UnmarshalJSON(bytes []byte) (err error) {
	varBrand := _Brand{}

	err = json.Unmarshal(bytes, &varBrand)
	if err == nil {
		*o = Brand(varBrand)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &additionalProperties)
	if err == nil {
		delete(additionalProperties, "agreeToCustomPrivacyPolicy")
		delete(additionalProperties, "customPrivacyPolicyUrl")
		delete(additionalProperties, "defaultApp")
		delete(additionalProperties, "displayLanguage")
		delete(additionalProperties, "id")
		delete(additionalProperties, "optOutOfUserCommunications")
		delete(additionalProperties, "removePoweredByOkta")
		delete(additionalProperties, "_links")
		o.AdditionalProperties = additionalProperties
	} else {
		return err
	}

	return err
}

type NullableBrand struct {
	value *Brand
	isSet bool
}

func (v NullableBrand) Get() *Brand {
	return v.value
}

func (v *NullableBrand) Set(val *Brand) {
	v.value = val
	v.isSet = true
}

func (v NullableBrand) IsSet() bool {
	return v.isSet
}

func (v *NullableBrand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBrand(val *Brand) *NullableBrand {
	return &NullableBrand{value: val, isSet: true}
}

func (v NullableBrand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBrand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

