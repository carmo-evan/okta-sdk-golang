/*
Okta Management APIs

Allows customers to easily access the Okta API

Copyright 2018 - Present Okta, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

API version: 3.0.0
Contact: devex-public@okta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
package okta

import (
	"encoding/json"
)

// SignInPageAllOf struct for SignInPageAllOf
type SignInPageAllOf struct {
	Type string `json:"type"`
	Url *string `json:"url,omitempty"`
	WidgetCustomizations *SignInPageAllOfWidgetCustomizations `json:"widgetCustomizations,omitempty"`
	// The version specified as a [Semantic Version](https://semver.org/).
	WidgetVersion *string `json:"widgetVersion,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SignInPageAllOf SignInPageAllOf

// NewSignInPageAllOf instantiates a new SignInPageAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSignInPageAllOf(type_ string) *SignInPageAllOf {
	this := SignInPageAllOf{}
	this.Type = type_
	return &this
}

// NewSignInPageAllOfWithDefaults instantiates a new SignInPageAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSignInPageAllOfWithDefaults() *SignInPageAllOf {
	this := SignInPageAllOf{}
	return &this
}

// GetType returns the Type field value
func (o *SignInPageAllOf) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SignInPageAllOf) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SignInPageAllOf) SetType(v string) {
	o.Type = v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *SignInPageAllOf) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignInPageAllOf) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *SignInPageAllOf) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *SignInPageAllOf) SetUrl(v string) {
	o.Url = &v
}

// GetWidgetCustomizations returns the WidgetCustomizations field value if set, zero value otherwise.
func (o *SignInPageAllOf) GetWidgetCustomizations() SignInPageAllOfWidgetCustomizations {
	if o == nil || o.WidgetCustomizations == nil {
		var ret SignInPageAllOfWidgetCustomizations
		return ret
	}
	return *o.WidgetCustomizations
}

// GetWidgetCustomizationsOk returns a tuple with the WidgetCustomizations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignInPageAllOf) GetWidgetCustomizationsOk() (*SignInPageAllOfWidgetCustomizations, bool) {
	if o == nil || o.WidgetCustomizations == nil {
		return nil, false
	}
	return o.WidgetCustomizations, true
}

// HasWidgetCustomizations returns a boolean if a field has been set.
func (o *SignInPageAllOf) HasWidgetCustomizations() bool {
	if o != nil && o.WidgetCustomizations != nil {
		return true
	}

	return false
}

// SetWidgetCustomizations gets a reference to the given SignInPageAllOfWidgetCustomizations and assigns it to the WidgetCustomizations field.
func (o *SignInPageAllOf) SetWidgetCustomizations(v SignInPageAllOfWidgetCustomizations) {
	o.WidgetCustomizations = &v
}

// GetWidgetVersion returns the WidgetVersion field value if set, zero value otherwise.
func (o *SignInPageAllOf) GetWidgetVersion() string {
	if o == nil || o.WidgetVersion == nil {
		var ret string
		return ret
	}
	return *o.WidgetVersion
}

// GetWidgetVersionOk returns a tuple with the WidgetVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignInPageAllOf) GetWidgetVersionOk() (*string, bool) {
	if o == nil || o.WidgetVersion == nil {
		return nil, false
	}
	return o.WidgetVersion, true
}

// HasWidgetVersion returns a boolean if a field has been set.
func (o *SignInPageAllOf) HasWidgetVersion() bool {
	if o != nil && o.WidgetVersion != nil {
		return true
	}

	return false
}

// SetWidgetVersion gets a reference to the given string and assigns it to the WidgetVersion field.
func (o *SignInPageAllOf) SetWidgetVersion(v string) {
	o.WidgetVersion = &v
}

func (o SignInPageAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	if o.WidgetCustomizations != nil {
		toSerialize["widgetCustomizations"] = o.WidgetCustomizations
	}
	if o.WidgetVersion != nil {
		toSerialize["widgetVersion"] = o.WidgetVersion
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *SignInPageAllOf) UnmarshalJSON(bytes []byte) (err error) {
	varSignInPageAllOf := _SignInPageAllOf{}

	err = json.Unmarshal(bytes, &varSignInPageAllOf)
	if err == nil {
		*o = SignInPageAllOf(varSignInPageAllOf)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &additionalProperties)
	if err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "url")
		delete(additionalProperties, "widgetCustomizations")
		delete(additionalProperties, "widgetVersion")
		o.AdditionalProperties = additionalProperties
	} else {
		return err
	}

	return err
}

type NullableSignInPageAllOf struct {
	value *SignInPageAllOf
	isSet bool
}

func (v NullableSignInPageAllOf) Get() *SignInPageAllOf {
	return v.value
}

func (v *NullableSignInPageAllOf) Set(val *SignInPageAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableSignInPageAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableSignInPageAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSignInPageAllOf(val *SignInPageAllOf) *NullableSignInPageAllOf {
	return &NullableSignInPageAllOf{value: val, isSet: true}
}

func (v NullableSignInPageAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSignInPageAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

